package clt.com.cn.controller.workflow;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import clt.com.cn.model.entity.Contract;
import clt.com.cn.model.entity.ContracttypeB;
import clt.com.cn.service.IContractManageService;
import clt.com.cn.service.IContracttypeBService;

/** 
 * @Package clt.com.cn.controller.workflow 
 * @Description: 合同相关
 * @author liuwu
 * @date 2015年10月21日 下午4:37:32 
 * @version V1.0 
 */
@Controller
@RequestMapping( "/contractController" )
public class ContractController
{
	@Autowired
	IContractManageService contractService;
	@Autowired
	private IContracttypeBService typeService;
	
	/**
	 * 
	 * @Description:查看合同列表
	 * @param request
	 * @return 
	 *   String 返回值描述
	 * @author liuwu
	 * @create_date 2015年10月21日 下午6:49:24
	 */
	@RequestMapping( "/createContract" )
	public String createContract( HttpServletRequest request )
	{
		String p = request.getParameter( "page" );
		HttpSession session = request.getSession();
		int userId = Integer.parseInt( session.getAttribute( "lineid" ).toString() );
		int page , pages , count;
		// count = contractService.getCount();
		String sql = "select c.lineid,c.vc_contractno,c.vc_contractname,c.vc_partya,c.vc_partyb,c.dt_start,c.dt_end,c.n_state,t.vc_type"
		        + " from contract c,contracttype_b t where c.i_contracttype=t.id  and c.n_enable=0 and c.i_user="
		        + userId;
		System.out.println( "sql:" + sql );
		String countSQL = "select count(*) from contract c,contracttype_b t where c.i_contracttype=t.id  and c.n_enable=0 and c.i_user="
		        + userId;
		System.out.println( "countSQL:" + countSQL );
		count = contractService.getCountBySQL( countSQL );
		pages = contractService.getpages( count , 5 );
		if ( p == null || p == "" )
		{
			page = 1;
		}
		else
		{
			page = Integer.parseInt( p );
			if ( page < 1 )
			{
				page = 1;
			}
			else if ( page > pages )
			{
				page = pages;
			}
		}
		
		List contracts = contractService.getDataBySqlQuery( sql , 5 , page );
		JSONArray arr = JSONArray.fromObject( contracts );
		System.out.println( "arr:" + arr );
		request.setAttribute( "page" , page );
		request.setAttribute( "pages" , pages );
		request.setAttribute( "contracts" , contracts );
		request.setAttribute( "returnPath" , "contractController/createContract?op=1" );
		
		return "oa_contract/contractList";
	}
	
	/**
	 * 进入保存页面
	 * @return
	 */
	@RequestMapping( "/toSave" )
	public String toAdd( HttpServletRequest request )
	{
		try
		{
			// 获取1级父合同类型
			List< ContracttypeB > pTypelist = typeService.getByPid( 0 );
			String idStr = request.getParameter( "id" );
			if ( StringUtils.isNotBlank( idStr ) )
			{
				// 编辑
				int id = Integer.parseInt( idStr );
				Contract contract = contractService.get( id );
				int typeId = contract.getiContracttype();
				ContracttypeB subtype = typeService.get( typeId );// 获取子合同类型
				int pid = subtype.getiPid();
				ContracttypeB partype = typeService.get( pid );// 获取父合同类型
				List< ContracttypeB > sublist = typeService.getByPid( pid );// 获取父合同下的子合同类型
				request.setAttribute( "partype" , partype );
				request.setAttribute( "subtype" , subtype );
				request.setAttribute( "sublist" , sublist );
				request.setAttribute( "contract" , contract );
			}
			request.setAttribute( "pTypelist" , pTypelist );
		}
		catch ( Exception e )
		{
			e.printStackTrace();
		}
		return "oa_contract/contractAdd";
	}
	
	/**
	 * 
	 * @Description:保存合同
	 * @param request
	 * @param response
	 * @param contract
	 * @return 
	 *   String 返回值描述
	 * @author chengwzh
	 * @create_date 2015年10月26日 下午1:59:43
	 */
	@RequestMapping( "/saveContract" )
	public String saveContract( HttpServletRequest request ,
	        HttpServletResponse response , Contract contract ,
	        @RequestParam( value = "files" , required = false ) MultipartFile[] files )
	{
		try
		{
			HttpSession session = request.getSession();
			SimpleDateFormat format = new SimpleDateFormat( "yyyy-MM-dd" );
			String start = request.getParameter( "start" );
			Date dtStart = format.parse( start );
			String end = request.getParameter( "end" );
			Date dtEnd = format.parse( end );
			contract.setDtStart( dtStart );
			contract.setDtEnd( dtEnd );
			if ( contract.getLineid() == null )
			{
				// 增加
				int userId = Integer.parseInt( session.getAttribute( "lineid" )
				        .toString() );
				contract.setiUser( userId );
				contractService.save( contract );
			}
			else
			{
				// 修改
				contractService.update( contract );
			}
			return "redirect:/contractController/createContract";
			
		}
		catch ( Exception e )
		{
			e.printStackTrace();
			return "oa_contract/contractAdd";
		}
	}
	
	/**
	 * 删除合同
	 * @param id
	 * @author chengwzh
	 * @date 2015/10/23
	 * @return
	 */
	@RequestMapping( "/del" )
	public String del( @RequestParam( "id" ) int id )
	{
		try
		{
			contractService.delete( id );
		}
		catch ( Exception e )
		{
			e.printStackTrace();
		}
		return "redirect:createContract";
	}
	
	@RequestMapping( "/getTypesByPid" )
	@ResponseBody
	public Map< String , Object > getTypesByPid( @RequestParam( value = "pid" ) int pid )
	{
		Map< String , Object > result = new HashMap< String , Object >();
		try
		{
			List< ContracttypeB > subTypes = typeService.getByPid( pid );
			result.put( "isSuccess" , true );
			result.put( "data" , subTypes );
			
		}
		catch ( Exception e )
		{
			result.put( "isSuccess" , false );
			result.put( "data" , null );
			e.printStackTrace();
		}
		return result;
	}
}
