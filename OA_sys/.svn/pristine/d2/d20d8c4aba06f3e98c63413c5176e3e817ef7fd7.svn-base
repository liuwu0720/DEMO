package clt.com.cn.filter;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.filter.OncePerRequestFilter;

import clt.com.cn.util.UserSession;

public class SessionFilter extends OncePerRequestFilter
{
	
	@Override
	protected void doFilterInternal( HttpServletRequest request ,
	        HttpServletResponse response , FilterChain filterChain )
	        throws ServletException , IOException
	{
		Enumeration enu = request.getParameterNames();
		if ( enu.hasMoreElements() )
		{
			System.out.println( "-----------开始打印请求参数-------" );
			while ( enu.hasMoreElements() )
			{
				String paraName = ( String ) enu.nextElement();
				System.out.println( paraName + ": " + request.getParameter( paraName ) );
			}
			System.out.println( "-----------结束打印请求参数-------" );
		}
		
		// 不过滤的uri
		String[] notFilter = new String[] { "login" , "openlogin" , "userLogin" ,
		        "/UserServlet/openlogin" , "Images" , "js" , "css" , "kindeditor" ,
		        "themes" , "My97DatePicker" , "img" , "UserServlet/ajaxCheckUser" ,
		        ".jsp" };
		
		// 请求的uri
		String uri = request.getRequestURI();
		String path = request.getContextPath() + "/";
		
		// uri中包含background时才进行过滤
		// 是否过滤
		boolean doFilter = true;
		for ( String s : notFilter )
		{
			if ( uri.endsWith( "frame.jsp" ) )
			{
				doFilter = true;
				break;
			}
			if ( uri.equals( path ) || uri.indexOf( s ) != - 1 )
			{
				// 如果uri中包含不过滤的uri，则不进行过滤
				doFilter = false;
				break;
			}
		}
		if ( doFilter )
		{
			// 执行过滤
			// 从session中获取登录者实体
			Object obj = request.getSession().getAttribute( "lineid" );
			if ( null == obj )
			{
				// 如果session中不存在登录者实体，则弹出框提示重新登录
				// 设置request和response的字符集，防止乱码
				request.setCharacterEncoding( "UTF-8" );
				response.setCharacterEncoding( "UTF-8" );
				response.setContentType( "text/html; charset=utf-8" );
				PrintWriter out = response.getWriter();
				String loginPage = "login.jsp";
				StringBuilder builder = new StringBuilder();
				builder.append( "<script type=\"text/javascript\">" );
				builder.append( "alert('请重新登录！');" );
				builder.append( "window.top.location='" );
				String basePath = request.getScheme() + "://" + request.getServerName()
				        + ":" + request.getServerPort() + path;
				builder.append( basePath + loginPage );
				builder.append( "';" );
				builder.append( "</script>" );
				out.print( builder.toString() );
			}
			else
			{
				String uname = ( String ) request.getSession().getAttribute( "uname" );
				String recordid = request.getSession().getAttribute( "recordid" )
				        .toString();
				// 如果session中存在登录者实体，则继续
				filterChain.doFilter( request , response );
				UserSession.set( "uname" , uname );
				UserSession.set( "empId" , recordid );
				UserSession.set( "userId" , obj );
			}
		}
		else
		{
			// 如果不执行过滤，则继续
			filterChain.doFilter( request , response );
		}
	}
	
}
