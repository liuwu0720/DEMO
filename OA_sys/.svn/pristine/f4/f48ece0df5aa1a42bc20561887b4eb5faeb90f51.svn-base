package clt.com.cn.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipInputStream;

import org.activiti.engine.FormService;
import org.activiti.engine.HistoryService;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricProcessInstance;
import org.activiti.engine.history.HistoricTaskInstance;
import org.activiti.engine.history.HistoricVariableInstance;
import org.activiti.engine.impl.identity.Authentication;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.pvm.PvmTransition;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.repository.Deployment;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.Execution;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Comment;
import org.activiti.engine.task.Task;
import org.apache.commons.lang.StringUtils;

import clt.com.cn.controller.workflow.WorkflowBean;
import clt.com.cn.dao.IContractApprovalDao;
import clt.com.cn.dao.IContractDao;
import clt.com.cn.dao.IContracttypePositionReDao;
import clt.com.cn.dao.IEmployrecordDao;
import clt.com.cn.model.entity.Contract;
import clt.com.cn.model.entity.ContractApproval;
import clt.com.cn.model.entity.ContracttypePositionRe;
import clt.com.cn.model.entity.Employrecord;
import clt.com.cn.service.IWorkflowService;
import clt.com.cn.util.SystemConstance;
import clt.com.cn.util.UserSession;

public class WorkflowServiceImpl implements IWorkflowService
{
	/**请假申请Dao*/
	
	private RepositoryService repositoryService;
	
	private RuntimeService runtimeService;
	
	private TaskService taskService;
	
	private FormService formService;
	
	private HistoryService historyService;
	
	private IContracttypePositionReDao iContracttypePositionReDao;
	
	private IEmployrecordDao iEmployrecordDao;
	
	private IContractDao iContractDao;
	
	private IContractApprovalDao iContractApprovalDao;
	
	/**
	 * @return the iContractApprovalDao
	 */
	public IContractApprovalDao getiContractApprovalDao()
	{
		return iContractApprovalDao;
	}
	
	/**
	 * @param iContractApprovalDao the iContractApprovalDao to set
	 */
	public void setiContractApprovalDao( IContractApprovalDao iContractApprovalDao )
	{
		this.iContractApprovalDao = iContractApprovalDao;
	}
	
	/**
	 * @return the iContractDao
	 */
	public IContractDao getiContractDao()
	{
		return iContractDao;
	}
	
	/**
	 * @param iContractDao the iContractDao to set
	 */
	public void setiContractDao( IContractDao iContractDao )
	{
		this.iContractDao = iContractDao;
	}
	
	/**
	 * @return the iEmployrecordDao
	 */
	public IEmployrecordDao getiEmployrecordDao()
	{
		return iEmployrecordDao;
	}
	
	/**
	 * @param iEmployrecordDao the iEmployrecordDao to set
	 */
	public void setiEmployrecordDao( IEmployrecordDao iEmployrecordDao )
	{
		this.iEmployrecordDao = iEmployrecordDao;
	}
	
	/**
	 * @return the iContracttypePositionReDao
	 */
	public IContracttypePositionReDao getiContracttypePositionReDao()
	{
		return iContracttypePositionReDao;
	}
	
	/**
	 * @param iContracttypePositionReDao the iContracttypePositionReDao to set
	 */
	public void setiContracttypePositionReDao(
	        IContracttypePositionReDao iContracttypePositionReDao )
	{
		this.iContracttypePositionReDao = iContracttypePositionReDao;
	}
	
	public void setHistoryService( HistoryService historyService )
	{
		this.historyService = historyService;
	}
	
	public void setFormService( FormService formService )
	{
		this.formService = formService;
	}
	
	public void setRuntimeService( RuntimeService runtimeService )
	{
		this.runtimeService = runtimeService;
	}
	
	public void setTaskService( TaskService taskService )
	{
		this.taskService = taskService;
	}
	
	public void setRepositoryService( RepositoryService repositoryService )
	{
		this.repositoryService = repositoryService;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param file
	 * @param filename 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public void saveNewDeploye( File file , String filename )
	{
		try
		{
			// 2：将File类型的文件转化成ZipInputStream流
			ZipInputStream zipInputStream = new ZipInputStream(
			        new FileInputStream( file ) );
			repositoryService.createDeployment()// 创建部署对象
			        .name( filename )// 添加部署名称
			        .addZipInputStream( zipInputStream )//
			        .deploy();// 完成部署
		}
		catch ( Exception e )
		{
			e.printStackTrace();
		}
		
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Deployment > findDeploymentList()
	{
		List< Deployment > list = repositoryService.createDeploymentQuery()// 创建部署对象查询
		        .orderByDeploymenTime().asc()//
		        .list();
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< ProcessDefinition > findProcessDefinitionList()
	{
		List< ProcessDefinition > list = repositoryService.createProcessDefinitionQuery()// 创建流程定义查询
		        .orderByProcessDefinitionVersion().asc()//
		        .list();
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param deploymentId
	 * @param imageName
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public InputStream findImageInputStream( String deploymentId , String imageName )
	{
		// TODO Auto-generated method stub
		return repositoryService.getResourceAsStream( deploymentId , imageName );
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param deploymentId 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public void deleteProcessDefinitionByDeploymentId( String deploymentId )
	{
		// TODO Auto-generated method stub
		
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param name
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Task > findTaskListByName( String name )
	{
		List< Task > list = taskService.createTaskQuery()//
		        .taskAssignee( name )// 指定个人任务查询
		        .orderByTaskCreateTime().asc()//
		        .list();
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public String findTaskFormKeyByTaskId( String taskId )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< String > findOutComeListByTaskId( String taskId )
	{
		// 返回存放连线的名称集合
		List< String > list = new ArrayList< String >();
		// 1:使用任务ID，查询任务对象
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 2：获取流程定义ID
		String processDefinitionId = task.getProcessDefinitionId();
		// 3：查询ProcessDefinitionEntiy对象
		ProcessDefinitionEntity processDefinitionEntity = ( ProcessDefinitionEntity ) repositoryService
		        .getProcessDefinition( processDefinitionId );
		// 使用任务对象Task获取流程实例ID
		String processInstanceId = task.getProcessInstanceId();
		// 使用流程实例ID，查询正在执行的执行对象表，返回流程实例对象
		ProcessInstance pi = runtimeService.createProcessInstanceQuery()//
		        .processInstanceId( processInstanceId )// 使用流程实例ID查询
		        .singleResult();
		// 获取当前活动的id
		String activityId = pi.getActivityId();
		if ( StringUtils.isNotBlank( activityId ) )
		{
			// 4：获取当前的活动
			ActivityImpl activityImpl = processDefinitionEntity.findActivity( activityId );
			// 5：获取当前活动完成之后连线的名称
			List< PvmTransition > pvmList = activityImpl.getOutgoingTransitions();
			if ( pvmList != null && pvmList.size() > 0 )
			{
				for ( PvmTransition pvm : pvmList )
				{
					String name = ( String ) pvm.getProperty( "name" );
					if ( StringUtils.isNotBlank( name ) )
					{
						list.add( name );
					}
					else
					{
						list.add( "默认提交" );
					}
				}
			}
		}
		else
		{
			// 会签流程
			list.add( "同意" );
			list.add( "驳回" );
		}
		
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Comment > findCommentByTaskId( String taskId )
	{
		List< Comment > list = new ArrayList< Comment >();
		// 使用当前的任务ID，查询当前流程对应的历史任务ID
		// 使用当前任务ID，获取当前任务对象
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 获取流程实例ID
		String processInstanceId = task.getProcessInstanceId();
		// //使用流程实例ID，查询历史任务，获取历史任务对应的每个任务ID
		// List<HistoricTaskInstance> htiList =
		// historyService.createHistoricTaskInstanceQuery()//历史任务表查询
		// .processInstanceId(processInstanceId)//使用流程实例ID查询
		// .list();
		// //遍历集合，获取每个任务ID
		// if(htiList!=null && htiList.size()>0){
		// for(HistoricTaskInstance hti:htiList){
		// //任务ID
		// String htaskId = hti.getId();
		// //获取批注信息
		// List<Comment> taskList =
		// taskService.getTaskComments(htaskId);//对用历史完成后的任务ID
		// list.addAll(taskList);
		// }
		// }
		list = taskService.getProcessInstanceComments( processInstanceId );
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param id
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Comment > findCommentByLeaveBillId( Long id )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public ProcessDefinition findProcessDefinitionByTaskId( String taskId )
	{
		// 使用任务ID，查询任务对象
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 获取流程定义ID
		String processDefinitionId = task.getProcessDefinitionId();
		// 查询流程定义的对象
		ProcessDefinition pd = repositoryService.createProcessDefinitionQuery()// 创建流程定义查询对象，对应表act_re_procdef
		        .processDefinitionId( processDefinitionId )// 使用流程定义ID查询
		        .singleResult();
		return pd;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public Map< String , Object > findCoordingByTask( String taskId )
	{
		// 存放坐标
		Map< String , Object > map = new HashMap< String , Object >();
		// 使用任务ID，查询任务对象
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 获取流程定义的ID
		String processDefinitionId = task.getProcessDefinitionId();
		// 获取流程定义的实体对象（对应.bpmn文件中的数据）
		ProcessDefinitionEntity processDefinitionEntity = ( ProcessDefinitionEntity ) repositoryService
		        .getProcessDefinition( processDefinitionId );
		// excetionId
		String executionId = task.getExecutionId();
		Execution execution = runtimeService.createExecutionQuery()
		        .executionId( executionId ).singleResult();
		
		// 流程实例ID
		// String processInstanceId = task.getProcessInstanceId();
		// 使用流程实例ID，查询正在执行的执行对象表，获取当前活动对应的流程实例对象
		/*ProcessInstance pi = runtimeService.createProcessInstanceQuery()// 创建流程实例查询
		        .processInstanceId( processInstanceId )// 使用流程实例ID查询
		        .singleResult();*/
		// 获取当前活动的ID
		String activityId = execution.getActivityId();
		// 获取当前活动对象
		ActivityImpl activityImpl = processDefinitionEntity.findActivity( activityId );// 活动ID
		// 获取坐标
		map.put( "x" , activityImpl.getX() );
		map.put( "y" , activityImpl.getY() );
		map.put( "width" , activityImpl.getWidth() );
		map.put( "height" , activityImpl.getHeight() );
		return map;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用  
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:48:02
	 */
	public void startFlowTest()
	{
		InputStream inputStreamBpmn = this.getClass().getResourceAsStream(
		        "sequenceFlow.bpmn" );
		InputStream inputStreamPng = this.getClass().getResourceAsStream(
		        "sequenceFlow.png" );
		Deployment deployment = repositoryService// 与流程定义和部署对象相关的Service
		        .createDeployment()// 创建一个部署对象
		        .name( "连线" )// 添加部署的名称
		        .addInputStream( "sequenceFlow.bpmn" , inputStreamBpmn )//
		        .addInputStream( "sequenceFlow.png" , inputStreamPng )//
		        .deploy();// 完成部署
		System.out.println( "部署ID：" + deployment.getId() );//
		System.out.println( "部署名称：" + deployment.getName() );
		
	}
	
	/** 
	 * @Description:启动流程
	 * @param contract
	 * @param userno 
	 * @author liuwu
	 * @create_date 2015年10月27日 下午4:12:37
	 */
	public void startProgress( Contract contract , String userno )
	{
		// 1：获取合同ID，使用合同ID，查询请合同
		Integer id = contract.getLineid();
		
		// 2：更新请假单的请假状态从0变成1（初始录入-->审核中）
		contract.setnState( 1 );
		// 3：使用当前对象获取到流程定义的key（对象的名称就是流程定义的key）
		String key = SystemConstance.CONTRACT_FLOWKEY;
		/**
		 * 4：从Session中获取当前任务的办理人，使用流程变量设置下一个任务的办理人
			    * inputUser是流程变量的名称，
			    * 获取的办理人是流程变量的值
		 */
		Map< String , Object > variables = new HashMap< String , Object >();
		variables.put( "inputUser" , userno );// 表示惟一用户
		
		setSignPostionbyContractType( contract , variables );// 根据合同类型，设置会签部门
		// 格式：Contract.id的形式（使用流程变量）
		String objId = key + "." + id;
		variables.put( "objId" , objId );
		// 6：使用流程定义的key，启动流程实例，同时设置流程变量，同时向正在执行的执行对象表中的字段BUSINESS_KEY添加业务数据，同时让流程关联业务
		runtimeService.startProcessInstanceByKey( key , objId , variables );
		
	}
	
	/** 
	 * @Description:根据合同类型，设置会签部门
	 * @param contract
	 * @param variables 
	 *   void 返回值描述
	 * @author liuwu
	 * @create_date 2015年10月27日 下午6:44:17
	 */
	private void setSignPostionbyContractType( Contract contract ,
	        Map< String , Object > variables )
	{
		// TODO Auto-generated method stub
		String hql = "from ContracttypePositionRe re where re.contracttypeB.id="
		        + contract.getiContracttype();
		List< ContracttypePositionRe > contracttypePositionRes = iContracttypePositionReDao
		        .getAllByHql( hql );
		// 邮件主题
		String subjectString = "合同《" + contract.getVcContractname() + "》需要部门会签";
		variables.put( "subject" , subjectString );
		
		List< String > assigneeList = new ArrayList< String >();
		String toUsersEmailString = "";
		// 如果是整车收入合同
		if ( contract.getiContracttype().equals( 8 ) )
		{
			// 如果是临时合同：商务管理部、产品规划部、财务管理部
			if ( contract.getnLong().equals( 1 ) )
			{
				for ( ContracttypePositionRe conPositionRe : contracttypePositionRes )
				{
					// 商务经理
					if ( conPositionRe.getPosition().getLineid() == 11 )
					{
						
						assigneeList.add( findManageUserByPosition( conPositionRe
						        .getPosition().getLineid() ) );
					}
					// 产品规划总监
					if ( conPositionRe.getPosition().getLineid() == 516 )
					{
						assigneeList.add( findManageUserByPosition( conPositionRe
						        .getPosition().getLineid() ) );
					}
					// 财务总监
					if ( conPositionRe.getPosition().getLineid() == 26 )
					{
						assigneeList.add( findManageUserByPosition( conPositionRe
						        .getPosition().getLineid() ) );
					}
				}
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL;
				
			}
			else
			// 长期合同:商务管理部、产品规划部、总裁助理、 财务管理部、 总裁
			{
				for ( ContracttypePositionRe conPositionRe : contracttypePositionRes )
				{
					assigneeList.add( findManageUserByPosition( conPositionRe
					        .getPosition().getLineid() ) );
				}
			}
			toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
			        + SystemConstance.PRODUCT_MANAGE_EMAIL + "," +
			        
			        SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
			        + SystemConstance.PRODUCT_MANAGE_EMAIL;
			
		}
		// 零部件合同
		if ( contract.getiContracttype().equals( 9 ) )
		{
			// 如果是与主机厂签订的 :商务管理部、产品规划部、总裁助理、 财务管理部、 总裁
			if ( contract.getnMainsign().equals( 0 ) )
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT );
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_EMAIL;
			}
			else
			// 商务管理部、产品规划部、财务管理部
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				// assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				// assigneeList.add( SystemConstance.PRESIDENT );
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL;
			}
		}
		// 长期运力采购合同
		if ( contract.getiContracttype().equals( 10 ) )
		{
			assigneeList.add( SystemConstance.BUSINESS_MANAGE );
			assigneeList.add( SystemConstance.PRODUCT_MANAGE );
			assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
			assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
			assigneeList.add( SystemConstance.CAPACITY_MANAGE );
			assigneeList.add( SystemConstance.PRESIDENT );
			toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
			        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
			        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
			        + SystemConstance.CAPACITY_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_EMAIL;
		}
		// 零部件采购合同
		if ( contract.getiContracttype().equals( 3 ) )
		{
			assigneeList.add( SystemConstance.BUSINESS_MANAGE );
			assigneeList.add( SystemConstance.PRODUCT_MANAGE );
			assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
			assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
			assigneeList.add( SystemConstance.PRESIDENT );
			toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
			        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
			        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_EMAIL;
		}
		// 汽车类采购合同
		if ( contract.getiContracttype().equals( 12 ) )
		{
			assigneeList.add( SystemConstance.BUSINESS_MANAGE );
			assigneeList.add( SystemConstance.PRODUCT_MANAGE );
			assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
			assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
			assigneeList.add( SystemConstance.PRESIDENT );
			toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
			        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
			        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_EMAIL;
		}
		// 物流器具设备采购合同
		if ( contract.getiContracttype().equals( 13 ) )
		{
			// 单件单价≤5万 产品规划部、商务管理部、总裁助理、 财务管理部
			if ( contract.getnPrice().equals( 0.0 ) )
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL;
				
			}
			// 单件单价>5万 产品规划部、商务管理部、总裁助理、 财务管理部、总裁
			else
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT );
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_EMAIL;
			}
		}
		// 办公设备采购合同
		if ( contract.getiContracttype().equals( 14 ) )
		{
			// 单件单价>5万 商务管理部、总裁助理、 财务管理部、 总裁
			if ( contract.getnPrice().equals( 1.0 ) )
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT );
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.PRESIDENT_EMAIL;
			}
			else
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL;
			}
		}
		// 土地租赁合同
		if ( contract.getiContracttype().equals( 15 ) )
		{
			// 年度金额＞50万 商务管理部、产品规划部、总裁助理、 财务管理部、 总裁
			if ( contract.getnPrice().equals( 1.0 ) )
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT );
				
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_EMAIL;
			}
			else
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL;
			}
		}
		// 房屋租赁合同 商务管理部、产品规划部、总裁助理、 财务管理部
		if ( contract.getiContracttype().equals( 16 ) )
		{
			assigneeList.add( SystemConstance.BUSINESS_MANAGE );
			assigneeList.add( SystemConstance.PRODUCT_MANAGE );
			assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
			assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
			
			toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
			        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
			        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
			        + SystemConstance.FINANCIAL_MANAGE_EMAIL;
			
		}
		// 以项目向下采购合同
		if ( contract.getiContracttype().equals( 18 ) )
		{
			// 年度金额＞20万 商务管理部、产品规划部、总裁助理、 财务管理部、 总裁
			if ( contract.getnPrice().equals( 1.0 ) )
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT );
				
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_EMAIL;
			}
			else
			// 商务管理部、产品规划部、总裁助理、 财务管理部
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL ;
			}
		}
		// 其他类合同
		if ( contract.getiContracttype().equals( 19 ) )
		{
			// 预算内 商务管理部、产品规划部、总裁助理、 财务管理部
			if ( contract.getnExpect().equals( 0 ) )
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL ;
			}
			else
			// 商务管理部、产品规划部、总裁助理、 财务管理部、 总裁
			{
				assigneeList.add( SystemConstance.BUSINESS_MANAGE );
				assigneeList.add( SystemConstance.PRODUCT_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT_ASSISTANT );
				assigneeList.add( SystemConstance.FINANCIAL_MANAGE );
				assigneeList.add( SystemConstance.PRESIDENT );
				
				toUsersEmailString = SystemConstance.BUSINESS_MANAGE_EMAIL + ","
				        + SystemConstance.PRODUCT_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_ASSISTANT_EMAIL + ","
				        + SystemConstance.FINANCIAL_MANAGE_EMAIL + ","
				        + SystemConstance.PRESIDENT_EMAIL;
			}
		}
		
		if ( assigneeList != null && assigneeList.size() > 0 )
		{
			
			variables.put( "tousers" , toUsersEmailString );
			variables.put( "assigneeList" , assigneeList );
			variables.put( "signCount" , 0 );
		}
		
	}
	
	/** 
	 * @Description:根据岗位ID查出对应人
	 * @param lineid
	 * @return 
	 *   String 返回值描述
	 * @author liuwu
	 * @create_date 2015年10月29日 上午11:09:33
	 */
	private String findManageUserByPosition( int lineid )
	{
		String hql = "from Employrecord where positionid = " + lineid;
		List< Employrecord > employrecords = iEmployrecordDao.getEmrInfo( hql , null );
		if ( employrecords != null && employrecords.size() > 0 )
		{
			return employrecords.get( 0 ).getFileno();
		}
		else
		{
			return " ";
		}
		
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月29日 下午5:16:03
	 */
	public Contract findContractByTaskId( String taskId )
	{
		// 1：使用任务ID，查询任务对象Task
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 2：使用任务对象Task获取流程实例ID
		String processInstanceId = task.getProcessInstanceId();
		// 3：使用流程实例ID，查询正在执行的执行对象表，返回流程实例对象
		ProcessInstance pi = runtimeService.createProcessInstanceQuery()//
		        .processInstanceId( processInstanceId )// 使用流程实例ID查询
		        .singleResult();
		// 4：使用流程实例对象获取BUSINESS_KEY
		String buniness_key = pi.getBusinessKey();
		// 5：获取BUSINESS_KEY对应的主键ID，使用主键ID，查询请假单对象（LeaveBill.1）
		String id = "";
		if ( StringUtils.isNotBlank( buniness_key ) )
		{
			// 截取字符串，取buniness_key小数点的第2个值
			id = buniness_key.split( "\\." )[1];
		}
		
		// 查询合同对象
		Contract contract = iContractDao.get( Integer.parseInt( id ) );
		return contract;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param workflowBean 
	 * @author liuwu
	 * @create_date 2015年10月30日 下午1:47:53
	 */
	public void saveSubmitTask( WorkflowBean workflowBean )
	{
		// 获取任务ID
		String taskId = workflowBean.getTaskId();
		// 获取连线的名称
		String outcome = workflowBean.getOutcome();
		// 批注信息
		String message = workflowBean.getComment();
		// 获取合同ID
		Integer id = workflowBean.getId();
		
		/**
		 * 1：在完成之前，添加一个批注信息，向act_hi_comment表中添加数据，用于记录对当前申请人的一些审核信息
		 */
		// 使用任务ID，查询任务对象，获取流程流程实例ID
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 获取流程实例ID
		String processInstanceId = task.getProcessInstanceId();
		/**
		 * 注意：添加批注的时候，由于Activiti底层代码是使用：
		 * 		String userId = Authentication.getAuthenticatedUserId();
			    CommentEntity comment = new CommentEntity();
			    comment.setUserId(userId);
			  所有需要从Session中获取当前登录人，作为该任务的办理人（审核人），对应act_hi_comment表中的User_ID的字段，不过不添加审核人，该字段为null
			 所以要求，添加配置执行使用Authentication.setAuthenticatedUserId();添加当前任务的审核人
		 * */
		String empId = UserSession.get( "empId" ).toString();
		Employrecord employrecord = iEmployrecordDao
		        .getEmrById( Integer.parseInt( empId ) );
		Authentication.setAuthenticatedUserId( employrecord.getEmployname() );
		message = message + "【" + outcome + "】";
		taskService.addComment( taskId , processInstanceId , message );
		/**
		 * 2：如果连线的名称是“默认提交”，那么就不需要设置，如果不是，就需要设置流程变量
		 * 在完成任务之前，设置流程变量，按照连线的名称，去完成任务
				 流程变量的名称：outcome
				 流程变量的值：连线的名称
		 */
		Map< String , Object > variables = new HashMap< String , Object >();
		if ( outcome != null && ! outcome.equals( "默认提交" ) )
		{
			variables.put( "outcome" , outcome );
		}
		// 如果是会签流程
		List< Task > tasks = taskService.createTaskQuery().taskName( "会签部门" )
		        .processInstanceId( processInstanceId ).list();
		// 如果是会签流程
		if ( tasks != null && tasks.size() > 0 )
		{
			List< Task > taskResultList = taskService.createTaskQuery().taskId( taskId )
			        .list();
			// 当前executionId
			String currentExecutionId = taskResultList.get( 0 ).getExecutionId();
			// 当前签署总数
			String currentSignCount = StringUtils.defaultString( runtimeService
			        .getVariable( currentExecutionId , "signCount" ).toString() , "0" );
			if ( outcome.equals( "同意" ) )
			{
				// 签署数+1
				runtimeService.setVariable( currentExecutionId , "signCount" ,
				        Integer.parseInt( currentSignCount ) + 1 );
				
			}
			
		}
		if ( outcome.equals( "驳回" ) )
		{
			Contract contract = iContractDao.get( id );
			contract.setnState( 3 );// 驳回
		}
		
		// 3：使用任务ID，完成当前人的个人任务，同时流程变量
		taskService.complete( taskId , variables );
		// 4：当任务完成之后，需要指定下一个任务的办理人（使用类）-----已经开发完成
		
		/**
		 * 5：在完成任务之后，判断流程是否结束
			如果流程结束了，更新合同表的状态从1变成2（审核中-->审核完成）
		 */
		ProcessInstance pi = runtimeService.createProcessInstanceQuery()//
		        .processInstanceId( processInstanceId )// 使用流程实例ID查询
		        .singleResult();
		// 流程结束了
		if ( pi == null )
		{
			// 更新状态从1变成2（审核中-->审核完成）
			Contract contract = iContractDao.get( id );
			contract.setnState( 2 );
		}
		// 保存合同审核记录表
		ContractApproval contractApproval = new ContractApproval();
		contractApproval.setIContract( id );
		String userId = UserSession.get( "userId" ).toString();
		String userNameString = UserSession.get( "uname" ).toString();
		contractApproval.setIUser( Integer.parseInt( userId ) );
		contractApproval.setVcApprovalname( userNameString );
		contractApproval.setVcComment( message );
		iContractApprovalDao.save( contractApproval );
		
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param id
	 * @return 
	 * @author liuwu
	 * @create_date 2015年11月2日 上午9:50:49
	 */
	public List< Comment > findCommentByContractId( String id )
	{
		int contractId = Integer.parseInt( id );
		// 使用ID，查询对象
		// Contract contract = iContractDao.get( contractId);
		// 获取对象的名称
		String objectName = SystemConstance.CONTRACT_FLOWKEY;
		// 组织流程表中的字段中的值
		String objId = objectName + "." + id;
		
		/**1:使用历史的流程实例查询，返回历史的流程实例对象，获取流程实例ID*/
		// HistoricProcessInstance hpi =
		// historyService.createHistoricProcessInstanceQuery()//对应历史的流程实例表
		// .processInstanceBusinessKey(objId)//使用BusinessKey字段查询
		// .singleResult();
		// //流程实例ID
		// String processInstanceId = hpi.getId();
		/**2:使用历史的流程变量查询，返回历史的流程变量的对象，获取流程实例ID*/
		HistoricVariableInstance hvi = historyService
		        .createHistoricVariableInstanceQuery()// 对应历史的流程变量表
		        .variableValueEquals( "objId" , objId )// 使用流程变量的名称和流程变量的值查询
		        .singleResult();
		// 流程实例ID
		String processInstanceId = hvi.getProcessInstanceId();
		List< Comment > list = taskService.getProcessInstanceComments( processInstanceId );
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId 
	 * @author liuwu
	 * @create_date 2015年11月4日 上午9:52:38
	 */
	public void deleteTaskByTaskId( String taskId )
	{
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 获取流程实例ID
		String processInstanceId = task.getProcessInstanceId();
		runtimeService.deleteProcessInstance( processInstanceId , null );
		taskService.deleteTask( taskId );
	}
	
	/** 
	 * @Description:查询个人的历史任务
	 * @param name
	 * @return 
	 * @author liuwu
	 * @create_date 2015年11月5日 下午1:52:15
	 */
	public List< Contract > findHistoryListByName( String name )
	{
		List< HistoricTaskInstance > list = historyService
		        .createHistoricTaskInstanceQuery().taskAssignee( name )
		        .orderByTaskDueDate().desc().list();
		
		List< Contract > contracts = new ArrayList< Contract >();
		for ( HistoricTaskInstance hInstance : list )
		{
			String proInstanceId = hInstance.getProcessInstanceId();
			// 3：使用流程实例ID，查询正在执行的执行对象表，返回流程实例对象
			HistoricProcessInstance pi = historyService
			        .createHistoricProcessInstanceQuery()
			        .processInstanceId( proInstanceId ).singleResult();
			
			// 4：使用流程实例对象获取BUSINESS_KEY
			String buniness_key = pi.getBusinessKey();
			// 5：获取BUSINESS_KEY对应的主键ID，使用主键ID，查询请假单对象（LeaveBill.1）
			String id = "";
			if ( StringUtils.isNotBlank( buniness_key ) )
			{
				// 截取字符串，取buniness_key小数点的第2个值
				id = buniness_key.split( "\\." )[1];
			}
			
			// 查询合同对象
			Contract contract = iContractDao.get( Integer.parseInt( id ) );
			contracts.add( contract );
		}
		System.out.println( contracts.size() );
		return contracts;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param name
	 * @param i
	 * @param page
	 * @return 
	 * @author liuwu
	 * @create_date 2015年11月5日 下午4:29:54
	 */
	public List< Contract > findHistoryListByNamePagelist( String name , int pageSize ,
	        int page )
	{
		List< HistoricTaskInstance > list = historyService
		        .createHistoricTaskInstanceQuery().taskAssignee( name )
		        .orderByTaskDueDate().desc()
		        .listPage( ( page - 1 ) * pageSize , pageSize );
		
		List< Contract > contracts = new ArrayList< Contract >();
		for ( HistoricTaskInstance hInstance : list )
		{
			String proInstanceId = hInstance.getProcessInstanceId();
			// 3：使用流程实例ID，查询正在执行的执行对象表，返回流程实例对象
			HistoricProcessInstance pi = historyService
			        .createHistoricProcessInstanceQuery()
			        .processInstanceId( proInstanceId ).singleResult();
			
			// 4：使用流程实例对象获取BUSINESS_KEY
			String buniness_key = pi.getBusinessKey();
			// 5：获取BUSINESS_KEY对应的主键ID，使用主键ID，查询请假单对象（LeaveBill.1）
			String id = "";
			if ( StringUtils.isNotBlank( buniness_key ) )
			{
				// 截取字符串，取buniness_key小数点的第2个值
				id = buniness_key.split( "\\." )[1];
			}
			
			// 查询合同对象
			Contract contract = iContractDao.get( Integer.parseInt( id ) );
			contracts.add( contract );
		}
		System.out.println( contracts.size() );
		return contracts;
	}
	
}
