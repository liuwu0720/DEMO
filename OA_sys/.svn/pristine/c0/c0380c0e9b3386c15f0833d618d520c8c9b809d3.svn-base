package clt.com.cn.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipInputStream;

import org.activiti.engine.FormService;
import org.activiti.engine.HistoryService;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.form.TaskFormData;
import org.activiti.engine.history.HistoricVariableInstance;
import org.activiti.engine.impl.identity.Authentication;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.pvm.PvmTransition;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.repository.Deployment;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Comment;
import org.activiti.engine.task.Task;
import org.apache.commons.lang.StringUtils;

import clt.com.cn.dao.IContractDao;
import clt.com.cn.dao.IContracttypePositionReDao;
import clt.com.cn.dao.IEmployrecordDao;
import clt.com.cn.model.entity.Contract;
import clt.com.cn.model.entity.ContracttypePositionRe;
import clt.com.cn.model.entity.Employrecord;
import clt.com.cn.service.IWorkflowService;
import clt.com.cn.util.SystemConstance;

public class WorkflowServiceImpl implements IWorkflowService
{
	/**请假申请Dao*/
	
	private RepositoryService repositoryService;
	
	private RuntimeService runtimeService;
	
	private TaskService taskService;
	
	private FormService formService;
	
	private HistoryService historyService;
	
	private IContracttypePositionReDao iContracttypePositionReDao;
	
	private IEmployrecordDao iEmployrecordDao;
	
	private IContractDao iContractDao;
	
	
	
	/**
	 * @return the iContractDao
	 */
	public IContractDao getiContractDao()
	{
		return iContractDao;
	}

	/**
	 * @param iContractDao the iContractDao to set
	 */
	public void setiContractDao( IContractDao iContractDao )
	{
		this.iContractDao = iContractDao;
	}

	/**
	 * @return the iEmployrecordDao
	 */
	public IEmployrecordDao getiEmployrecordDao()
	{
		return iEmployrecordDao;
	}
	
	/**
	 * @param iEmployrecordDao the iEmployrecordDao to set
	 */
	public void setiEmployrecordDao( IEmployrecordDao iEmployrecordDao )
	{
		this.iEmployrecordDao = iEmployrecordDao;
	}
	
	/**
	 * @return the iContracttypePositionReDao
	 */
	public IContracttypePositionReDao getiContracttypePositionReDao()
	{
		return iContracttypePositionReDao;
	}
	
	/**
	 * @param iContracttypePositionReDao the iContracttypePositionReDao to set
	 */
	public void setiContracttypePositionReDao(
	        IContracttypePositionReDao iContracttypePositionReDao )
	{
		this.iContracttypePositionReDao = iContracttypePositionReDao;
	}
	
	public void setHistoryService( HistoryService historyService )
	{
		this.historyService = historyService;
	}
	
	public void setFormService( FormService formService )
	{
		this.formService = formService;
	}
	
	public void setRuntimeService( RuntimeService runtimeService )
	{
		this.runtimeService = runtimeService;
	}
	
	public void setTaskService( TaskService taskService )
	{
		this.taskService = taskService;
	}
	
	public void setRepositoryService( RepositoryService repositoryService )
	{
		this.repositoryService = repositoryService;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param file
	 * @param filename 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public void saveNewDeploye( File file , String filename )
	{
		try
		{
			// 2：将File类型的文件转化成ZipInputStream流
			ZipInputStream zipInputStream = new ZipInputStream(
			        new FileInputStream( file ) );
			repositoryService.createDeployment()// 创建部署对象
			        .name( filename )// 添加部署名称
			        .addZipInputStream( zipInputStream )//
			        .deploy();// 完成部署
		}
		catch ( Exception e )
		{
			e.printStackTrace();
		}
		
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Deployment > findDeploymentList()
	{
		List< Deployment > list = repositoryService.createDeploymentQuery()// 创建部署对象查询
		        .orderByDeploymenTime().asc()//
		        .list();
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< ProcessDefinition > findProcessDefinitionList()
	{
		List< ProcessDefinition > list = repositoryService.createProcessDefinitionQuery()// 创建流程定义查询
		        .orderByProcessDefinitionVersion().asc()//
		        .list();
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param deploymentId
	 * @param imageName
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public InputStream findImageInputStream( String deploymentId , String imageName )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param deploymentId 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public void deleteProcessDefinitionByDeploymentId( String deploymentId )
	{
		// TODO Auto-generated method stub
		
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param name
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Task > findTaskListByName( String name )
	{
		List< Task > list = taskService.createTaskQuery()//
		        .taskAssignee( name )// 指定个人任务查询
		        .orderByTaskCreateTime().asc()//
		        .list();
		return list;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public String findTaskFormKeyByTaskId( String taskId )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< String > findOutComeListByTaskId( String taskId )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Comment > findCommentByTaskId( String taskId )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param id
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public List< Comment > findCommentByLeaveBillId( Long id )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public ProcessDefinition findProcessDefinitionByTaskId( String taskId )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:12:53
	 */
	public Map< String , Object > findCoordingByTask( String taskId )
	{
		// TODO Auto-generated method stub
		return null;
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用  
	 * @author liuwu
	 * @create_date 2015年10月21日 下午3:48:02
	 */
	public void startFlowTest()
	{
		InputStream inputStreamBpmn = this.getClass().getResourceAsStream(
		        "sequenceFlow.bpmn" );
		InputStream inputStreamPng = this.getClass().getResourceAsStream(
		        "sequenceFlow.png" );
		Deployment deployment = repositoryService// 与流程定义和部署对象相关的Service
		        .createDeployment()// 创建一个部署对象
		        .name( "连线" )// 添加部署的名称
		        .addInputStream( "sequenceFlow.bpmn" , inputStreamBpmn )//
		        .addInputStream( "sequenceFlow.png" , inputStreamPng )//
		        .deploy();// 完成部署
		System.out.println( "部署ID：" + deployment.getId() );//
		System.out.println( "部署名称：" + deployment.getName() );
		
	}
	
	/** 
	 * @Description:启动流程
	 * @param contract
	 * @param userno 
	 * @author liuwu
	 * @create_date 2015年10月27日 下午4:12:37
	 */
	public void startProgress( Contract contract , String userno )
	{
		// 1：获取合同ID，使用合同ID，查询请合同
		Integer id = contract.getLineid();
		
		// 2：更新请假单的请假状态从0变成1（初始录入-->审核中）
		contract.setnState( 1 );
		// 3：使用当前对象获取到流程定义的key（对象的名称就是流程定义的key）
		String key = SystemConstance.CONTRACT_FLOWKEY;
		/**
		 * 4：从Session中获取当前任务的办理人，使用流程变量设置下一个任务的办理人
			    * inputUser是流程变量的名称，
			    * 获取的办理人是流程变量的值
		 */
		Map< String , Object > variables = new HashMap< String , Object >();
		variables.put( "inputUser" , userno );// 表示惟一用户
		
		setSignPostionbyContractType( contract , variables );// 根据合同类型，设置会签部门
		// 格式：Contract.id的形式（使用流程变量）
		String objId = key + "." + id;
		variables.put( "objId" , objId );
		// 6：使用流程定义的key，启动流程实例，同时设置流程变量，同时向正在执行的执行对象表中的字段BUSINESS_KEY添加业务数据，同时让流程关联业务
		runtimeService.startProcessInstanceByKey( key , objId , variables );
		
	}
	
	/** 
	 * @Description:根据合同类型，设置会签部门
	 * @param contract
	 * @param variables 
	 *   void 返回值描述
	 * @author liuwu
	 * @create_date 2015年10月27日 下午6:44:17
	 */
	private void setSignPostionbyContractType( Contract contract ,
	        Map< String , Object > variables )
	{
		// TODO Auto-generated method stub
		String hql = "from ContracttypePositionRe re where re.contracttypeB.id="
		        + contract.getiContracttype();
		List< ContracttypePositionRe > contracttypePositionRes = iContracttypePositionReDao
		        .getAllByHql( hql );
		
		List< String > assigneeList = new ArrayList< String >();
		// 如果是整车收入合同
		if ( contract.getiContracttype().equals( 8 ) )
		{
			// 如果是临时合同：商务管理部、产品规划部、财务管理部
			if ( contract.getnLong().equals( 1 ) )
			{
				for ( ContracttypePositionRe conPositionRe : contracttypePositionRes )
				{
					// 商务经理
					if ( conPositionRe.getPosition().getLineid() == 11 )
					{
						
						assigneeList.add( findManageUserByPosition( conPositionRe
						        .getPosition().getLineid() ) );
					}
					// 产品规划总监
					if ( conPositionRe.getPosition().getLineid() == 516 )
					{
						assigneeList.add( findManageUserByPosition( conPositionRe
						        .getPosition().getLineid() ) );
					}
					// 财务总监
					if ( conPositionRe.getPosition().getLineid() == 26 )
					{
						assigneeList.add( findManageUserByPosition( conPositionRe
						        .getPosition().getLineid() ) );
					}
				}
			}
			else
			// 长期合同:商务管理部、产品规划部、总裁助理、 财务管理部、 总裁
			{
				for ( ContracttypePositionRe conPositionRe : contracttypePositionRes )
				{
					assigneeList.add( findManageUserByPosition( conPositionRe
					        .getPosition().getLineid() ) );
				}
			}
			
		}
		if ( assigneeList != null && assigneeList.size() > 0 )
		{
			variables.put( "assigneeList" , assigneeList );
			variables.put( "signCount" , 0 );
		}
		
	}
	
	/** 
	 * @Description:根据岗位ID查出对应人
	 * @param lineid
	 * @return 
	 *   String 返回值描述
	 * @author liuwu
	 * @create_date 2015年10月29日 上午11:09:33
	 */
	private String findManageUserByPosition( int lineid )
	{
		String hql = "from Employrecord where positionid = " + lineid;
		List< Employrecord > employrecords = iEmployrecordDao.getEmrInfo( hql , null );
		if ( employrecords != null && employrecords.size() > 0 )
		{
			return employrecords.get( 0 ).getFileno();
		}
		else
		{
			return " ";
		}
		
	}
	
	/** 
	 * @Description:这里用一句话描述这个方法的作用 
	 * @param taskId
	 * @return 
	 * @author liuwu
	 * @create_date 2015年10月29日 下午5:16:03
	 */
	public Contract findContractByTaskId( String taskId )
	{
		// 1：使用任务ID，查询任务对象Task
		Task task = taskService.createTaskQuery()//
		        .taskId( taskId )// 使用任务ID查询
		        .singleResult();
		// 2：使用任务对象Task获取流程实例ID
		String processInstanceId = task.getProcessInstanceId();
		// 3：使用流程实例ID，查询正在执行的执行对象表，返回流程实例对象
		ProcessInstance pi = runtimeService.createProcessInstanceQuery()//
		        .processInstanceId( processInstanceId )// 使用流程实例ID查询
		        .singleResult();
		// 4：使用流程实例对象获取BUSINESS_KEY
		String buniness_key = pi.getBusinessKey();
		// 5：获取BUSINESS_KEY对应的主键ID，使用主键ID，查询请假单对象（LeaveBill.1）
		String id = "";
		if ( StringUtils.isNotBlank( buniness_key ) )
		{
			// 截取字符串，取buniness_key小数点的第2个值
			id = buniness_key.split( "\\." )[1];
		}
		
		//查询合同对象
		Contract contract = iContractDao.get( Integer.parseInt( id ) );
		return contract;
	}
	
}
