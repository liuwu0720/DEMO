package clt.com.cn.diagram;

import java.io.InputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.ProcessEngine;
import org.activiti.engine.ProcessEngines;
import org.activiti.engine.repository.Deployment;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.activiti.engine.task.TaskQuery;
import org.apache.commons.lang.StringUtils;
import org.junit.Test;

/** 
 * @Package multiInstance 
 * @Description:会签流程
 * @author liuwu
 * @date 2015年10月26日 下午1:51:09 
 * @version V1.0 
 */
public class MultiTaskTest
{
	
	ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();
	
	/**部署流程定义（从inputStream）*/
	@Test
	public void deploymentProcessDefinition_inputStream()
	{
		InputStream inputStreamBpmn = this.getClass().getResourceAsStream(
		        "contract.bpmn" );
		InputStream inputStreamPng = this.getClass()
		        .getResourceAsStream( "contract.png" );
		Deployment deployment = processEngine.getRepositoryService()// 与流程定义和部署对象相关的Service
		        .createDeployment()// 创建一个部署对象
		        .name( "流程会签" )// 添加部署的名称
		        .addInputStream( "contract.bpmn" , inputStreamBpmn )//
		        .addInputStream( "contract.png" , inputStreamPng )//
		        .deploy();// 完成部署
		System.out.println( "部署ID：" + deployment.getId() );//
		System.out.println( "部署名称：" + deployment.getName() );//
	}
	
	/**启动流程实例*/
	@Test
	public void startProcessInstance()
	{
		// 流程定义的key
		String processDefinitionKey = "multitask";
		
		Map< String , Object > processInstVar = new HashMap< String , Object >();
		String[] assigneeList = { "hjx" , "liuwu" , "cwz" };
		// 必须是Listh
		processInstVar.put( "assigneeList" , Arrays.asList( assigneeList ) );
		processInstVar.put( "signCount" , 0 );
		
		ProcessInstance pi = processEngine.getRuntimeService()// 与正在执行的流程实例和执行对象相关的Service
		        // .startProcessInstanceByKey(processDefinitionKey);//使用流程定义的key启动流程实例，key对应helloworld.bpmn文件中id的属性值，使用key值启动，默认是按照最新版本的流程定义启动
		        .startProcessInstanceByKey( processDefinitionKey , processInstVar );
		
		System.out.println( "流程实例ID:" + pi.getId() );// 流程实例ID 101
		System.out.println( "流程定义ID:" + pi.getProcessDefinitionId() );// 流程定义ID
		                                                              // helloworld:1:4
	}
	
	/**完成我的任务*/
	@Test
	public void completeMyPersonalTask()
	{
		// 任务ID
		String taskId = "20621";
		
		List< Task > tasks = processEngine.getTaskService().createTaskQuery()
		        .taskName( "COUNTTASK" ).list();
		// 如果是会签流程
		if ( tasks != null && tasks.size() > 0 )
		{
			List< Task > taskResultList = processEngine.getTaskService()
			        .createTaskQuery().taskId( taskId ).list();
			// 当前executionId
			String currentExecutionId = taskResultList.get( 0 ).getExecutionId();
			// 当前签署总数
			String currentSignCount = StringUtils.defaultString( processEngine
			        .getRuntimeService().getVariable( currentExecutionId , "signCount" )
			        .toString() , "0" );
			// 签署数+1
			processEngine.getRuntimeService().setVariable( currentExecutionId ,
			        "signCount" , Integer.parseInt( currentSignCount ) + 1 );
			List list = ( List ) processEngine.getRuntimeService().getVariable(
			        currentExecutionId , "assigneeList" );
			
			System.out.println( "list = " + list.size() );
		}
		
			processEngine.getTaskService()// 与正在执行的任务管理相关的Service
			        .complete( taskId );
		
		
		System.out.println( "完成任务：任务ID：" + taskId );
	}
}
